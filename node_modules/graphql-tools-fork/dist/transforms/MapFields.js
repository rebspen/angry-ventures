var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var MapFields = /** @class */ (function () {
    function MapFields(fieldNodeTransformerMap) {
        this.fieldNodeTransformerMap = fieldNodeTransformerMap;
    }
    MapFields.prototype.transformSchema = function (schema) {
        this.schema = schema;
        return schema;
    };
    MapFields.prototype.transformRequest = function (originalRequest) {
        if (!this.schema) {
            throw new Error('MapFields transform required initialization with target schema within the transformSchema method.');
        }
        var fragments = {};
        originalRequest.document.definitions
            .filter(function (def) { return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION; })
            .forEach(function (def) {
            fragments[def.name.value] = def;
        });
        var document = transformDocument(originalRequest.document, this.schema, this.fieldNodeTransformerMap, fragments);
        return __assign(__assign({}, originalRequest), { document: document });
    };
    return MapFields;
}());
exports.default = MapFields;
function transformDocument(document, schema, fieldNodeTransformerMap, fragments) {
    var _a;
    if (fragments === void 0) { fragments = {}; }
    var typeInfo = new graphql_1.TypeInfo(schema);
    var newDocument = graphql_1.visit(document, graphql_1.visitWithTypeInfo(typeInfo, (_a = {},
        _a[graphql_1.Kind.SELECTION_SET] = function (node) {
            var parentType = typeInfo.getParentType();
            if (parentType != null) {
                var parentTypeName = parentType.name;
                var fieldNodeTransformers_1 = fieldNodeTransformerMap[parentTypeName];
                var newSelections_1 = [];
                node.selections.forEach(function (selection) {
                    if (selection.kind === graphql_1.Kind.FIELD) {
                        var fieldName = selection.name.value;
                        var transformedSelection = void 0;
                        if (fieldNodeTransformers_1 != null) {
                            var fieldNodeTransformer = fieldNodeTransformers_1[fieldName];
                            if (fieldNodeTransformer != null) {
                                transformedSelection = fieldNodeTransformer(selection, fragments);
                            }
                            else {
                                transformedSelection = selection;
                            }
                        }
                        else {
                            transformedSelection = selection;
                        }
                        if (Array.isArray(transformedSelection)) {
                            newSelections_1 = newSelections_1.concat(transformedSelection);
                        }
                        else if (transformedSelection.kind === graphql_1.Kind.FIELD) {
                            newSelections_1.push(transformedSelection);
                        }
                        else {
                            newSelections_1.push(transformedSelection);
                        }
                    }
                    else {
                        newSelections_1.push(selection);
                    }
                });
                return __assign(__assign({}, node), { selections: newSelections_1 });
            }
        },
        _a)));
    return newDocument;
}
//# sourceMappingURL=MapFields.js.map