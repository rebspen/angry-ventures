var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var polyfills_1 = require("../polyfills");
var heal_1 = require("./heal");
var graphqlVersion_1 = require("./graphqlVersion");
function cloneDirective(directive) {
    return new graphql_1.GraphQLDirective(polyfills_1.toConfig(directive));
}
exports.cloneDirective = cloneDirective;
function cloneType(type) {
    if (graphql_1.isObjectType(type)) {
        var config = polyfills_1.toConfig(type);
        return new graphql_1.GraphQLObjectType(__assign(__assign({}, config), { interfaces: typeof config.interfaces === 'function'
                ? config.interfaces
                : config.interfaces.slice() }));
    }
    else if (graphql_1.isInterfaceType(type)) {
        var config = polyfills_1.toConfig(type);
        var newConfig = __assign(__assign({}, config), { interfaces: graphqlVersion_1.graphqlVersion() >= 15
                ? config.interfaces.slice()
                : undefined });
        return new graphql_1.GraphQLInterfaceType(newConfig);
    }
    else if (graphql_1.isUnionType(type)) {
        var config = polyfills_1.toConfig(type);
        return new graphql_1.GraphQLUnionType(__assign(__assign({}, config), { types: config.types.slice() }));
    }
    else if (graphql_1.isInputObjectType(type)) {
        return new graphql_1.GraphQLInputObjectType(polyfills_1.toConfig(type));
    }
    else if (graphql_1.isEnumType(type)) {
        return new graphql_1.GraphQLEnumType(polyfills_1.toConfig(type));
    }
    else if (graphql_1.isScalarType(type)) {
        return polyfills_1.isSpecifiedScalarType(type)
            ? type
            : new graphql_1.GraphQLScalarType(polyfills_1.toConfig(type));
    }
    throw new Error("Invalid type " + type);
}
exports.cloneType = cloneType;
function cloneSchema(schema) {
    var newDirectives = schema
        .getDirectives()
        .map(function (directive) { return cloneDirective(directive); });
    var originalTypeMap = schema.getTypeMap();
    var newTypeMap = {};
    Object.keys(originalTypeMap).forEach(function (typeName) {
        if (!typeName.startsWith('__')) {
            newTypeMap[typeName] = cloneType(originalTypeMap[typeName]);
        }
    });
    heal_1.healTypes(newTypeMap, newDirectives);
    var query = schema.getQueryType();
    var mutation = schema.getMutationType();
    var subscription = schema.getSubscriptionType();
    return new graphql_1.GraphQLSchema(__assign(__assign({}, polyfills_1.toConfig(schema)), { query: query != null ? newTypeMap[query.name] : undefined, mutation: mutation != null ? newTypeMap[mutation.name] : undefined, subscription: subscription != null ? newTypeMap[subscription.name] : undefined, types: Object.keys(newTypeMap).map(function (typeName) { return newTypeMap[typeName]; }), directives: newDirectives }));
}
exports.cloneSchema = cloneSchema;
//# sourceMappingURL=clone.js.map